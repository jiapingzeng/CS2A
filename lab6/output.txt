#include <iostream>
#include <string>
using namespace std;

const string LINE = "------------------------------------------";

class TripleString {
    public:
        string string1, string2, string3;
        const int MAX_LEN = 50;
        const int MIN_LEN = 1;
        const string DEFAULT_STRING = "(undefined)";
        TripleString();
        TripleString(string str1, string str2, string str3);
        string getString1();
        bool setString1(string str);
        string getString2();
        bool setString2(string str);
        string getString3();
        bool setString3(string str);
        string toString();
    private:
        bool validString(string str);
        bool setString(string &str, string val);
};

void printTripleStrings(TripleString ts1, TripleString ts2, TripleString ts3,
            TripleString ts4, TripleString ts5) {
    cout << LINE << endl;
    cout << ts1.toString() << endl;
    cout << ts2.toString() << endl;
    cout << ts3.toString() << endl;
    cout << ts4.toString() << endl;
    cout << ts5.toString() << endl;
    cout << LINE << endl << endl;
}

int main() {
    TripleString ts1, ts2, ts3;
    TripleString ts4 ("a", "b", "c");
    TripleString ts5 ("1", "2", "3");

    cout << "TripleStrings after instantiation: " << endl;
    printTripleStrings(ts1, ts2, ts3, ts4, ts5);

    ts1.setString3("hi");
    ts2.setString2("..........");
    ts3.setString1("re");
    ts4.setString2("    ");
    ts5.setString3("fr");

    cout << "TripleStrings after changes: " << endl;
    printTripleStrings(ts1, ts2, ts3, ts4, ts5);

    cout << "Accessor Tests: " << endl << LINE << endl;
    cout << "String 3 of the 1st TripleString: " 
        << ts1.getString3() << endl;
    cout << "String 1 of the 1st TripleString: " 
        << ts3.getString1() << endl;
    cout << LINE << endl << endl;

    cout << "Mutator Tests: " << endl << LINE << endl;
    cout << "The 2nd TripleString before testing mutators: "
        << ts2.toString() << endl;
    cout << "Attempting to set String 1 of the 2nd " 
        << "TripleString to \"\" (empty string)" << endl;
    ts2.setString1("");
    cout << "Attempting to set String 3 of the 2nd "
        << "TripleString to \"changed\"" << endl;
    ts2.setString3("changed");
    cout << "The 2nd TripleString after the attempts: "
        << ts2.toString() << endl;
    cout << LINE << endl << endl;
}

TripleString::TripleString() {
    string1 = DEFAULT_STRING;
    string2 = DEFAULT_STRING;
    string3 = DEFAULT_STRING;
}

TripleString::TripleString(string str1, string str2, string str3) {
    string1 = validString(str1) ? str1 : DEFAULT_STRING;
    string2 = validString(str2) ? str2 : DEFAULT_STRING;
    string3 = validString(str3) ? str3 : DEFAULT_STRING;
}

string TripleString::getString1() {
    return string1;
}

bool TripleString::setString1(string str) {
    return setString(string1, str);
}

string TripleString::getString2() {
    return string2;
}

bool TripleString::setString2(string str) {
    return setString(string2, str);
}

string TripleString::getString3() {
    return string3;
}

bool TripleString::setString3(string str) {
    return setString(string3, str);
}

string TripleString::toString() {
    return string1 + ", " + string2 + ", " + string3;
}

bool TripleString::setString(string &str, string val) {
    if (validString(val)) {
        str = val;
        return true;
    }
    return false;
}

bool TripleString::validString(string str) {
    return str.length() >= MIN_LEN && str.length() <= MAX_LEN;
}

----------RUN----------

TripleStrings after instantiation: 
------------------------------------------
(undefined), (undefined), (undefined)
(undefined), (undefined), (undefined)
(undefined), (undefined), (undefined)
a, b, c
1, 2, 3
------------------------------------------

TripleStrings after changes: 
------------------------------------------
(undefined), (undefined), hi
(undefined), .........., (undefined)
re, (undefined), (undefined)
a,     , c
1, 2, fr
------------------------------------------

Accessor Tests: 
------------------------------------------
String 3 of the 1st TripleString: hi
String 1 of the 1st TripleString: re
------------------------------------------

Mutator Tests: 
------------------------------------------
The 2nd TripleString before testing mutators: (undefined), .........., (undefined)
Attempting to set String 1 of the 2nd TripleString to "" (empty string)
Attempting to set String 3 of the 2nd TripleString to "changed"
The 2nd TripleString after the attempts: (undefined), .........., changed
------------------------------------------


-----------------------

